/*
 * Generated by gdbus-codegen 2.57.1 from org.freedesktop.impl.portal.PermissionStore.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef ____APP_FLATPAK_PERMISSION_DBUS_GENERATED_H__
#define ____APP_FLATPAK_PERMISSION_DBUS_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.impl.portal.PermissionStore */

#define XDP_DBUS_TYPE_PERMISSION_STORE (xdp_dbus_permission_store_get_type ())
#define XDP_DBUS_PERMISSION_STORE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_DBUS_TYPE_PERMISSION_STORE, XdpDbusPermissionStore))
#define XDP_DBUS_IS_PERMISSION_STORE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_DBUS_TYPE_PERMISSION_STORE))
#define XDP_DBUS_PERMISSION_STORE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), XDP_DBUS_TYPE_PERMISSION_STORE, XdpDbusPermissionStoreIface))

struct _XdpDbusPermissionStore;
typedef struct _XdpDbusPermissionStore XdpDbusPermissionStore;
typedef struct _XdpDbusPermissionStoreIface XdpDbusPermissionStoreIface;

struct _XdpDbusPermissionStoreIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_delete) (
    XdpDbusPermissionStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_table,
    const gchar *arg_id);

  gboolean (*handle_list) (
    XdpDbusPermissionStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_table);

  gboolean (*handle_lookup) (
    XdpDbusPermissionStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_table,
    const gchar *arg_id);

  gboolean (*handle_set) (
    XdpDbusPermissionStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_table,
    gboolean arg_create,
    const gchar *arg_id,
    GVariant *arg_app_permissions,
    GVariant *arg_data);

  gboolean (*handle_set_permission) (
    XdpDbusPermissionStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_table,
    gboolean arg_create,
    const gchar *arg_id,
    const gchar *arg_app,
    const gchar *const *arg_permissions);

  gboolean (*handle_set_value) (
    XdpDbusPermissionStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_table,
    gboolean arg_create,
    const gchar *arg_id,
    GVariant *arg_data);

  guint  (*get_version) (XdpDbusPermissionStore *object);

  void (*changed) (
    XdpDbusPermissionStore *object,
    const gchar *arg_table,
    const gchar *arg_id,
    gboolean arg_deleted,
    GVariant *arg_data,
    GVariant *arg_permissions);

};

GType xdp_dbus_permission_store_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *xdp_dbus_permission_store_interface_info (void);
guint xdp_dbus_permission_store_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void xdp_dbus_permission_store_complete_lookup (
    XdpDbusPermissionStore *object,
    GDBusMethodInvocation *invocation,
    GVariant *permissions,
    GVariant *data);

void xdp_dbus_permission_store_complete_set (
    XdpDbusPermissionStore *object,
    GDBusMethodInvocation *invocation);

void xdp_dbus_permission_store_complete_delete (
    XdpDbusPermissionStore *object,
    GDBusMethodInvocation *invocation);

void xdp_dbus_permission_store_complete_set_value (
    XdpDbusPermissionStore *object,
    GDBusMethodInvocation *invocation);

void xdp_dbus_permission_store_complete_set_permission (
    XdpDbusPermissionStore *object,
    GDBusMethodInvocation *invocation);

void xdp_dbus_permission_store_complete_list (
    XdpDbusPermissionStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *ids);



/* D-Bus signal emissions functions: */
void xdp_dbus_permission_store_emit_changed (
    XdpDbusPermissionStore *object,
    const gchar *arg_table,
    const gchar *arg_id,
    gboolean arg_deleted,
    GVariant *arg_data,
    GVariant *arg_permissions);



/* D-Bus method calls: */
void xdp_dbus_permission_store_call_lookup (
    XdpDbusPermissionStore *proxy,
    const gchar *arg_table,
    const gchar *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdp_dbus_permission_store_call_lookup_finish (
    XdpDbusPermissionStore *proxy,
    GVariant **out_permissions,
    GVariant **out_data,
    GAsyncResult *res,
    GError **error);

gboolean xdp_dbus_permission_store_call_lookup_sync (
    XdpDbusPermissionStore *proxy,
    const gchar *arg_table,
    const gchar *arg_id,
    GVariant **out_permissions,
    GVariant **out_data,
    GCancellable *cancellable,
    GError **error);

void xdp_dbus_permission_store_call_set (
    XdpDbusPermissionStore *proxy,
    const gchar *arg_table,
    gboolean arg_create,
    const gchar *arg_id,
    GVariant *arg_app_permissions,
    GVariant *arg_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdp_dbus_permission_store_call_set_finish (
    XdpDbusPermissionStore *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xdp_dbus_permission_store_call_set_sync (
    XdpDbusPermissionStore *proxy,
    const gchar *arg_table,
    gboolean arg_create,
    const gchar *arg_id,
    GVariant *arg_app_permissions,
    GVariant *arg_data,
    GCancellable *cancellable,
    GError **error);

void xdp_dbus_permission_store_call_delete (
    XdpDbusPermissionStore *proxy,
    const gchar *arg_table,
    const gchar *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdp_dbus_permission_store_call_delete_finish (
    XdpDbusPermissionStore *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xdp_dbus_permission_store_call_delete_sync (
    XdpDbusPermissionStore *proxy,
    const gchar *arg_table,
    const gchar *arg_id,
    GCancellable *cancellable,
    GError **error);

void xdp_dbus_permission_store_call_set_value (
    XdpDbusPermissionStore *proxy,
    const gchar *arg_table,
    gboolean arg_create,
    const gchar *arg_id,
    GVariant *arg_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdp_dbus_permission_store_call_set_value_finish (
    XdpDbusPermissionStore *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xdp_dbus_permission_store_call_set_value_sync (
    XdpDbusPermissionStore *proxy,
    const gchar *arg_table,
    gboolean arg_create,
    const gchar *arg_id,
    GVariant *arg_data,
    GCancellable *cancellable,
    GError **error);

void xdp_dbus_permission_store_call_set_permission (
    XdpDbusPermissionStore *proxy,
    const gchar *arg_table,
    gboolean arg_create,
    const gchar *arg_id,
    const gchar *arg_app,
    const gchar *const *arg_permissions,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdp_dbus_permission_store_call_set_permission_finish (
    XdpDbusPermissionStore *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xdp_dbus_permission_store_call_set_permission_sync (
    XdpDbusPermissionStore *proxy,
    const gchar *arg_table,
    gboolean arg_create,
    const gchar *arg_id,
    const gchar *arg_app,
    const gchar *const *arg_permissions,
    GCancellable *cancellable,
    GError **error);

void xdp_dbus_permission_store_call_list (
    XdpDbusPermissionStore *proxy,
    const gchar *arg_table,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdp_dbus_permission_store_call_list_finish (
    XdpDbusPermissionStore *proxy,
    gchar ***out_ids,
    GAsyncResult *res,
    GError **error);

gboolean xdp_dbus_permission_store_call_list_sync (
    XdpDbusPermissionStore *proxy,
    const gchar *arg_table,
    gchar ***out_ids,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
guint xdp_dbus_permission_store_get_version (XdpDbusPermissionStore *object);
void xdp_dbus_permission_store_set_version (XdpDbusPermissionStore *object, guint value);


/* ---- */

#define XDP_DBUS_TYPE_PERMISSION_STORE_PROXY (xdp_dbus_permission_store_proxy_get_type ())
#define XDP_DBUS_PERMISSION_STORE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_DBUS_TYPE_PERMISSION_STORE_PROXY, XdpDbusPermissionStoreProxy))
#define XDP_DBUS_PERMISSION_STORE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_DBUS_TYPE_PERMISSION_STORE_PROXY, XdpDbusPermissionStoreProxyClass))
#define XDP_DBUS_PERMISSION_STORE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_DBUS_TYPE_PERMISSION_STORE_PROXY, XdpDbusPermissionStoreProxyClass))
#define XDP_DBUS_IS_PERMISSION_STORE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_DBUS_TYPE_PERMISSION_STORE_PROXY))
#define XDP_DBUS_IS_PERMISSION_STORE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_DBUS_TYPE_PERMISSION_STORE_PROXY))

typedef struct _XdpDbusPermissionStoreProxy XdpDbusPermissionStoreProxy;
typedef struct _XdpDbusPermissionStoreProxyClass XdpDbusPermissionStoreProxyClass;
typedef struct _XdpDbusPermissionStoreProxyPrivate XdpDbusPermissionStoreProxyPrivate;

struct _XdpDbusPermissionStoreProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  XdpDbusPermissionStoreProxyPrivate *priv;
};

struct _XdpDbusPermissionStoreProxyClass
{
  GDBusProxyClass parent_class;
};

GType xdp_dbus_permission_store_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdpDbusPermissionStoreProxy, g_object_unref)
#endif

void xdp_dbus_permission_store_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpDbusPermissionStore *xdp_dbus_permission_store_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
XdpDbusPermissionStore *xdp_dbus_permission_store_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void xdp_dbus_permission_store_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpDbusPermissionStore *xdp_dbus_permission_store_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
XdpDbusPermissionStore *xdp_dbus_permission_store_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define XDP_DBUS_TYPE_PERMISSION_STORE_SKELETON (xdp_dbus_permission_store_skeleton_get_type ())
#define XDP_DBUS_PERMISSION_STORE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_DBUS_TYPE_PERMISSION_STORE_SKELETON, XdpDbusPermissionStoreSkeleton))
#define XDP_DBUS_PERMISSION_STORE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_DBUS_TYPE_PERMISSION_STORE_SKELETON, XdpDbusPermissionStoreSkeletonClass))
#define XDP_DBUS_PERMISSION_STORE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_DBUS_TYPE_PERMISSION_STORE_SKELETON, XdpDbusPermissionStoreSkeletonClass))
#define XDP_DBUS_IS_PERMISSION_STORE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_DBUS_TYPE_PERMISSION_STORE_SKELETON))
#define XDP_DBUS_IS_PERMISSION_STORE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_DBUS_TYPE_PERMISSION_STORE_SKELETON))

typedef struct _XdpDbusPermissionStoreSkeleton XdpDbusPermissionStoreSkeleton;
typedef struct _XdpDbusPermissionStoreSkeletonClass XdpDbusPermissionStoreSkeletonClass;
typedef struct _XdpDbusPermissionStoreSkeletonPrivate XdpDbusPermissionStoreSkeletonPrivate;

struct _XdpDbusPermissionStoreSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  XdpDbusPermissionStoreSkeletonPrivate *priv;
};

struct _XdpDbusPermissionStoreSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType xdp_dbus_permission_store_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdpDbusPermissionStoreSkeleton, g_object_unref)
#endif

XdpDbusPermissionStore *xdp_dbus_permission_store_skeleton_new (void);


G_END_DECLS

#endif /* ____APP_FLATPAK_PERMISSION_DBUS_GENERATED_H__ */
